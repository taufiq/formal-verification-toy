
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocCOMPARATORleftBOOLEAN_OPERATORleftPLUSMINUSleftTIMESrightUMINUSANNOTATION ASSIGNMENT ASSUME BOOLEAN_OPERATOR BOOL_TYPE COMPARATOR ELSE FALSE IF IMPLIES INT_TYPE LPAREN MINUS NUMBER PLUS RPAREN THEN TIMES TRUE TRUTH_VALUES VARIABLEstart : assignment\n             | expression\n             | annotation\n             | assumption\n             | declarationdeclaration : BOOL_TYPE VARIABLEdeclaration : INT_TYPE VARIABLEannotation : ANNOTATION expressionassumption : ASSUME expressionassignment : VARIABLE ASSIGNMENT expressionexpression : expression PLUS expressionexpression : expression MINUS expressionexpression : expression TIMES expressionexpression : LPAREN expression RPARENexpression : NUMBERexpression : VARIABLEexpression : MINUS expression %prec UMINUSexpression : expression COMPARATOR expressionexpression : expression BOOLEAN_OPERATOR expressionexpression : expression IMPLIES expressionexpression : IF expression THEN assignment ELSE assignment'
    
_lr_action_items = {'VARIABLE':([0,8,9,11,12,13,14,15,16,17,18,19,20,21,22,39,42,],[7,24,24,24,24,24,29,30,24,24,24,24,24,24,24,41,41,]),'LPAREN':([0,8,9,11,12,13,16,17,18,19,20,21,22,],[9,9,9,9,9,9,9,9,9,9,9,9,9,]),'NUMBER':([0,8,9,11,12,13,16,17,18,19,20,21,22,],[10,10,10,10,10,10,10,10,10,10,10,10,10,]),'MINUS':([0,3,7,8,9,10,11,12,13,16,17,18,19,20,21,22,23,24,25,26,27,28,31,32,33,34,35,36,37,38,43,],[8,17,-16,8,8,-15,8,8,8,8,8,8,8,8,8,8,-17,-16,17,17,17,17,-11,-12,-13,17,17,17,17,-14,-21,]),'IF':([0,8,9,11,12,13,16,17,18,19,20,21,22,],[11,11,11,11,11,11,11,11,11,11,11,11,11,]),'ANNOTATION':([0,],[12,]),'ASSUME':([0,],[13,]),'BOOL_TYPE':([0,],[14,]),'INT_TYPE':([0,],[15,]),'$end':([1,2,3,4,5,6,7,10,23,24,27,28,29,30,31,32,33,34,35,36,37,38,43,],[0,-1,-2,-3,-4,-5,-16,-15,-17,-16,-8,-9,-6,-7,-11,-12,-13,-18,-19,-20,-10,-14,-21,]),'PLUS':([3,7,10,23,24,25,26,27,28,31,32,33,34,35,36,37,38,43,],[16,-16,-15,-17,-16,16,16,16,16,-11,-12,-13,16,16,16,16,-14,-21,]),'TIMES':([3,7,10,23,24,25,26,27,28,31,32,33,34,35,36,37,38,43,],[18,-16,-15,-17,-16,18,18,18,18,18,18,-13,18,18,18,18,-14,-21,]),'COMPARATOR':([3,7,10,23,24,25,26,27,28,31,32,33,34,35,36,37,38,43,],[19,-16,-15,-17,-16,19,19,19,19,-11,-12,-13,None,-19,19,19,-14,-21,]),'BOOLEAN_OPERATOR':([3,7,10,23,24,25,26,27,28,31,32,33,34,35,36,37,38,43,],[20,-16,-15,-17,-16,20,20,20,20,-11,-12,-13,20,-19,20,20,-14,-21,]),'IMPLIES':([3,7,10,23,24,25,26,27,28,31,32,33,34,35,36,37,38,43,],[21,-16,-15,-17,-16,21,21,21,21,-11,-12,-13,-18,-19,21,21,-14,-21,]),'ASSIGNMENT':([7,41,],[22,22,]),'RPAREN':([10,23,24,25,31,32,33,34,35,36,37,38,43,],[-15,-17,-16,38,-11,-12,-13,-18,-19,-20,-10,-14,-21,]),'THEN':([10,23,24,26,31,32,33,34,35,36,37,38,43,],[-15,-17,-16,39,-11,-12,-13,-18,-19,-20,-10,-14,-21,]),'ELSE':([10,23,24,31,32,33,34,35,36,37,38,40,43,],[-15,-17,-16,-11,-12,-13,-18,-19,-20,-10,-14,42,-21,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'assignment':([0,39,42,],[2,40,43,]),'expression':([0,8,9,11,12,13,16,17,18,19,20,21,22,],[3,23,25,26,27,28,31,32,33,34,35,36,37,]),'annotation':([0,],[4,]),'assumption':([0,],[5,]),'declaration':([0,],[6,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> assignment','start',1,'p_start','parser.py',44),
  ('start -> expression','start',1,'p_start','parser.py',45),
  ('start -> annotation','start',1,'p_start','parser.py',46),
  ('start -> assumption','start',1,'p_start','parser.py',47),
  ('start -> declaration','start',1,'p_start','parser.py',48),
  ('declaration -> BOOL_TYPE VARIABLE','declaration',2,'p_bool_declaration','parser.py',53),
  ('declaration -> INT_TYPE VARIABLE','declaration',2,'p_int_declaration','parser.py',61),
  ('annotation -> ANNOTATION expression','annotation',2,'p_annotation','parser.py',70),
  ('assumption -> ASSUME expression','assumption',2,'p_assumption','parser.py',77),
  ('assignment -> VARIABLE ASSIGNMENT expression','assignment',3,'p_assignment','parser.py',86),
  ('expression -> expression PLUS expression','expression',3,'p_expression_plus','parser.py',96),
  ('expression -> expression MINUS expression','expression',3,'p_expression_minus','parser.py',103),
  ('expression -> expression TIMES expression','expression',3,'p_expression_times','parser.py',110),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_parenthesis_expr','parser.py',117),
  ('expression -> NUMBER','expression',1,'p_expression_num','parser.py',121),
  ('expression -> VARIABLE','expression',1,'p_expression_variable','parser.py',125),
  ('expression -> MINUS expression','expression',2,'p_expr_uminus','parser.py',134),
  ('expression -> expression COMPARATOR expression','expression',3,'p_formula_comparison','parser.py',141),
  ('expression -> expression BOOLEAN_OPERATOR expression','expression',3,'p_formula_logic_op','parser.py',148),
  ('expression -> expression IMPLIES expression','expression',3,'p_formula_implies','parser.py',155),
  ('expression -> IF expression THEN assignment ELSE assignment','expression',6,'p_if_then_else','parser.py',163),
]
